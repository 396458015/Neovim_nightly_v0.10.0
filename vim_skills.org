* Vim цКАх╖з
  1. NORMALцибх╝Пф╕Л, SHIFT чЫ╕х╜Уф║Очз╗хКихКащАЯщФо,  w b e чз╗хКихЕЙцаЗх╛ИцЕв, ф╜ЖцШп W B E ш╡░чЪДх╛Их┐л.
  2. NORMALцибх╝Пф╕Л, C-o ш╖│ш╜мхИ░хЕЙцаЗф╣ЛхЙНчЪДф╜Нч╜о.
  3. цПТхЕецибх╝Пф╕Л, CTRL-X CTRL-F хПпф╗ецЦ╣ф╛┐чЪДшбехЕих╜УхЙНчЫох╜ХчЪДцЦЗф╗╢хРН.
  4. цПТхЕецибх╝Пф╕Л, х╜Уф╜ахПСчО░ф╕Аф╕кхНХшпНхЖЩщФЩф║Ж, х║ФшпехдЪчФи CTRL-W ш┐ЩцпФ <BackSpace> х┐л.
  5. VISUALцибх╝Пф╕Л, чФи v хС╜ф╗дщАЙцЛйцЦЗцЬмцЧ╢, хПпф╗ечФи o цОЙхд┤щАЙцЛй, цЬЙцЧ╢х╛ИцЬЙчФи.
  6. цОТчЙИ
    :ce(nter) цЬмшбМцЦЗхнЧх▒Еф╕н  :le(ft) цЬмшбМцЦЗхнЧщЭах╖ж  :le(ft) цЬмшбМцЦЗхнЧщЭах╖ж  :ri(ght) цЬмшбМцЦЗхнЧщЭахП│
    gq хп╣щАЙф╕нчЪДцЦЗхнЧщЗНцОТ, хН│хп╣ш┐ЗщХ┐чЪДцЦЗхнЧш┐ЫшбМцЦншбМ
    :Pangu ца╝х╝ПхМЦ
  7. цЯечЬЛхОЖхП▓хС╜ф╗дшо░х╜Х,NORMALцибх╝Пф╕Л'q:'
  8. хЬи цпПф╕А шбМх░╛ ц╖╗хКа something ,":'<,'>s/$/something/g"
    хЬи цпПф╕А шбМщжЦ ц╖╗хКа something ,":'<,'>s/^/something/g"
  9. VISUALцибх╝ПщАЙф╕нхРО,zfхПпф╗ешЗкхКиф╕║щАЙф╕нчЪДщГихИЖчФЯцИР{{{}}}цКШхПачмж,zdхПпф╗ехИащЩдцКШхПачмж
  10. хдзх░ПхЖЩф║ТцНв,VISUAlщАЙф╕нхРОu/UхПпф╗ехдзх░ПхЖЩф║ТцНвя╝МхРМца╖~ф╣ЯхПпф╗е
  11. INSERTцибх╝Пф╕Л<c-w>хИащЩдф╕Кф╕Аф╕кхНХшпН,<C-u>хИащЩдш┐Щф╕АшбМхЕЙцаЗхЙНчЪДцЙАцЬЙхЖЕхо╣
  12. цХ░хнЧх║ПхИЧчФЯцИР.VISUALхЭЧщАЙцХ░хнЧхРО,g <C-a>:ч┤пшоб+1,<C-x>:ч┤пшоб-1
  13. хИащЩдцЯРцо╡шбМ,":1,100d",хИащЩд1-100шбМ
  14. чмм1хИЧцОТх║П:'sort n' хвЮх║П; 'sort! n' щЩНх║П; '1,4sort n' хп╣цМЗхоЪшбМцОТх║П
    чмм2хИЧцОТх║П(щАЧхП╖щЪФх╝А):'sort /[^,]*,/ n' хвЮх║П;'sort! /[^,]*,/ n'щЩНх║П
  15. 'sort nu' цОТх║П+хО╗щЗН
  16. чЫ╕хп╣шбМхП╖чЪДф╜┐чФи: 1) хРСф╕Лш╖│ш╜мшбМ nj; хРСф╕Кш╖│ш╜мшбМ nk;
                     2я╝ЙхИащЩдхдЪшбМ ndj, хИащЩдф╗ОхЕЙцаЗшбМ-хЕЙцаЗшбМф╗еф╕ЛчЪДхдЪшбМ(чЫ╕хп╣шбМхП╖);
                        хМ║хИлф║Оф╜┐чФиndd, щЭЮчЫ╕хп╣шбМхП╖цЧ╢ф╜┐чФиndd, чЫ╕х╜Уф║ОхИащЩдnшбМ,хМЕхРлхЕЙцаЗшбМ, хИащЩдчЫ╕хп╣шбМхП╖чЪДn-1шбМ
  17. цКШхПа     zc zC     цЙАцЬЙ zM
      цЙУх╝АцКШхПа zo zO     цЙАцЬЙ zR
  18. хИащЩдхПкшжБхРлцЬЙ123чЪДшбМ :g/123/d
      хИащЩдчй║шбМ :g/^$/d
  19. marks
         -- шо╛хоЪцаЗшо░ m + ф╗╗ф╕АшЛ▒цЦЗхнЧ
         -- хИащЩдцаЗшо░
                     :delm + цаЗшо░чЪДшЛ▒цЦЗхнЧцпН
                     :delm a-c хИащЩдaшЗ│cчЪДцаЗшо░я╝М
                     :delm A-Z хИащЩдхЕищГихдзхЖЩцаЗшо░
                     :delm!    хИащЩдхЕищГих░ПхЖЩцаЗшо░
         -- чз╗хКишЗ│цаЗшо░
                     ` + цаЗшо░чЪДшЛ▒цЦЗхнЧцпН  чз╗хКихИ░цаЗшо░хЕЙцаЗхдД
                     ' + цаЗшо░чЪДшЛ▒цЦЗхнЧцпН  чз╗хКихИ░цаЗшо░шбМщжЦ

* icons
 тЬЧ тЬЦя╕П тЭМ тЪб тЪая╕П ЁЯФНЁЯУЭтЭУЁЯЪлтЫФтЭЧЁЯНЕтП░
 Modified ЁЯУЭ
 тП░юАГтП│тМЫ
 яТР, яАМ, яЖИ, яЩС, яБ▒, ябз, яЩЩ, яФй, яа╡, яСЙ, яла

* plugins
** Telescope file_browser
 mappings
" <A-c>/c   create
" <A-r>/r	rename	        Rename multi-selected files/folders
" <A-y>/y	copy	        Copy (multi-)selected files/folders to current path
" <A-d>/d	delete	        Delete (multi-)selected files/folders
" <A-m>/m	move	        Move multi-selected files/folders to current path
" <C-o>/o	open	        Open file/folder with default system application

" <C-g>/g	goto_parent_dir	Go to parent directory
" <C-e>/e	goto_home_dir	Go to home directory
" <C-w>/w	goto_cwd	    Go to current working directory (cwd)
" <C-t>/t	change_cwd	    Change nvim's cwd to selected folder/file(parent)
" <C-f>/f	toggle_browser	Toggle between file and folder browser
" <C-h>/h	toggle_hidden	Toggle hidden files/folders
" <C-s>/s	toggle_all	    Toggle all entries ignoring ./ and ../
" хдЪщАЙ      <Tab>

** whick-key
-- override the label used to display some keys. It doesn't effect WK in any other way.
-- For example:
-- ["<space>"] = "SPC",
-- ["<cr>"] = "RET",
-- ["<tab>"] = "TAB",

** nightfox
note: nightfox color change: (1) white:   #dfdfe0 -> #abb2bf  ps:чЩ╜шЙ▓хПШц╡Е
                             (2) fg1:     #cdcecf -> #abb2bf  ps:чЩ╜шЙ▓хПШц╡Е,хРМф╕К
                             (3) comment: #738091 -> #5c6370  ps:ц│ищЗКщвЬшЙ▓хПШц╡Е
                             (4) sel0:    #2b3b51 -> #3e4452  ps:Vцибх╝ПцбЖщАЙщвЬшЙ▓хПШц╖▒
                             file: "C:\Users\ThinkPad\AppData\Local\nvim-data\lazy\nightfox.nvim\lua\nightfox\palette\nightfox.lua"
Dark:  nightfox duskfox terafox nordfox Carbonfox
Light: dayfox dawnfox

** <<┬аPlugin - vim-visual-increment-master >>
 <C-a>хвЮхКа(х╖охА╝1) <C-x>хЗПх░П(х╖охА╝1)
 n<C-a>хвЮхКа(х╖охА╝n) n<C-x>хЗПх░П(х╖охА╝n)

 <C-a>хвЮхКа       <C-a>хвЮхКа       n<C-a>хвЮхКа
 1         1     a         a     1         1
 1   ----> 2     a   ----> b     1   ----> 1+n
 1         3     a         c     1         1+2n

** latex plugin
   #+BEGIN_SRC vim
" {{{ LATEXцПТф╗╢ <<┬аPlugin - lervag/vimtex >>
SumatraPDF ш╜пф╗╢ф╕ншо╛ч╜оя╝Ъ
"nvr --remote-silent %f -c %l"
" }}}
   #+END_SRC

** increment date <<┬аvim-speeddating-master >>
" цЯечЬЛцЧецЬЯца╝х╝П':SpeedDatingFormat'
" хЬи'C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/Local_Plugins/vim-speeddating-master/plugin/speeddating.vim'хвЮхКацЦ░ца╝х╝П
" SpeedDatingFormat %Y-%m-%d %a %H:%M               " define 1
" SpeedDatingFormat %Y-%m-%d (%a)%*                 " define 2
" SpeedDatingFormat %Y-%m-%d %a                     " define 3

** dashboard
   щААхЗ║цЧ╢ф╝ЪцКещФЩ
   шзгхЖ│хКЮц│Хх░Ж
   "C:\Users\ThinkPad\AppData\Local\nvim-data\lazy\dashboard-nvim\lua\dashboard\events.lua"
   ф╕нчмм27-52шбМчЪДф╗гчаБц│ищЗКя╝МхоМч╛ОшзгхЖ│уАВ
#+BEGIN_SRC lua
-- startify style (hyper)
    config = function()
      require('dashboard').setup({
      theme = 'hyper',
      shortcut_type = 'number',
      config = {
        disable_move = false,
        week_header = { enable = true },
        packages = { enable = false },
        project = {
          enable = false,
        },
        shortcut = {
            {
              icon = 'яСд ',
              desc = 'Recently files',
              group = 'Label',
              action = 'LeaderfMru',  --leaderf
              --action = 'Telescope oldfiles',  --Telescope
              key= 'r',
            },
            {
              icon = 'яРе ',
              desc = 'dotfiles',
              group = 'Number',
              action = "edit $MYVIMRC | tcd %:p:h",--tabnew;edit
              key = 'd',
            },
            {
              icon = 'юй┐ ',
              desc = 'New File',
              group = 'Number',
              action = 'enew',
              key = 'i',
            },
            {
              icon = "яЬЕ ",
              desc = "Exit",
              group = 'Number',
              action = "qa",
              key = "q",
            },
        },
        mru = { limit = 15, icon = 'ЁЯУЪ ', label = 'Recently Files' },
        --header ={
        --},
        footer = function()
            return {
                '',
                '',
                [[. ,-"-.   ,-"-. ,-"-.   ,-"-. ,-"-.   ,]],
                [[ X | | \ / | | X | | \ / | | X | | \ / ]],
                [[/ \| | |X| | |/ \| | |X| | |/ \| | |X| ]],
                [[   `-!-' `-!-"   `-!-' `-!-'   `-!-' `-]],
                '',
                '',
                "ЁЯОЙ NVIM(v" .. vim.version().major .. "." .. vim.version().minor .. "." .. vim.version().patch .. ") " .. "loaded " .. require("lazy").stats().count .. " plugins яЗж in " .. require"lazy".stats().startuptime .. " ms ЁЯОЙ",
            }
        end
      },
  	  hide = {
  		statusline = true,
  		tabline = true,
  		winbar = true,
  	},
    })
    end,
  },

#+END_SRC


#+BEGIN_SRC lua
header ={
    "",
    "",
    " тг┐тг┐тг╖тбБтвЖтаИтаХтвХтвВтвХтвВтвХтвВтвФтвВтвХтвДтаВтгВтаВтаЖтвВтвХтвВтвХтвВтвХтвВтвХтвВ ",
    " тг┐тг┐тг┐тб╖таКтбвтб╣тгжтбСтвВтвХтвВтвХтвВтвХтвВтаХтаФтаМтаЭтаЫта╢та╢тв╢тгжтгДтвВтвХтвВтвХ ",
    " тг┐тг┐таПтгатг╛тгжтбРтвМтв┐тг╖тгжтгЕтбСтаХтабтаРтв┐та┐тгЫтаЯтаЫтаЫтаЫтаЫтабтв╖тбИтвВтвХтвВ ",
    " таЯтгбтг╛тг┐тг┐тг┐тг┐тгжтгСтаЭтв┐тг┐тг┐тг┐тг┐тг┐тб╡твБтгдтг╢тг╢тг┐тв┐тв┐тв┐тбЯтв╗тгдтвСтвВ ",
    " тг╛тг┐тг┐тб┐твЯтгЫтг╗тг┐тг┐тг┐тгжтгмтгЩтг╗тг┐тг┐тг╖тг┐тг┐твЯтвЭтвХтвХтвХтвХтв╜тг┐тг┐тг╖тгФ ",
    " тг┐тг┐та╡таЪтаЙтвАтгАтгАтгИтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгЧтвХтвХтвХтвХтвХтвХтг╜тг┐тг┐тг┐тг┐ ",
    " тв╖тгВтгатг┤тг╛тб┐тб┐тб╗тб╗тг┐тг┐тг┤тг┐тг┐тг┐тг┐тг┐тг┐тг╖тг╡тг╡тг╡тг╖тг┐тг┐тг┐тг┐тг┐тг┐тб┐ ",
    " твМта╗тг┐тб┐тблтбктбктбктбктг║тг┐тг┐тг┐тг┐тг┐та┐та┐тв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таГ ",
    " тагтбБта╣тбктбктбктбктгктг╛тг┐тг┐тг┐тг┐таЛтаРтвЙтвНтвДтвМта╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таПтаИ ",
    " тбгтбШтвДтаЩтг╛тг╛тг╛тг┐тг┐тг┐тг┐тг┐тг┐тбАтвРтвХтвХтвХтвХтвХтбШтг┐тг┐тг┐тг┐тг┐тг┐таПтаатаИ ",
    " таМтвКтвВтвгта╣тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгзтвРтвХтвХтвХтвХтвХтвЕтг┐тг┐тг┐тг┐тб┐твЛтвЬтаатаИ ",
    " таДтаБтаХтвЭтбвтаИта╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тгХтгСтгСтгСтг╡тг┐тг┐тг┐тб┐твЛтвФтвХтг┐таатаИ ",
    " таитбВтбАтвСтвХтбЕтаВтаДтаЙтаЫта╗та┐тв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐твЛтвФтвХтвХтг┐тг┐таатаИ ",
    " таДтактгВтаБтвХтаЖтаДтаВтаДтаБтбАтаВтбАтаДтвИтаЙтвНтвЫтвЫтвЫтвЛтвФтвХтвХтвХтг╜тг┐тг┐таатаИ ",
    "",
    "",
},
footer = {
    '',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтгАтгатгАтгатгдтгдтгдтгдтгдтгдтгАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаата┤таптантгнтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тг╢тгДтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгатг╢тг╢тг┐тг┐тг╢тг╢тг╢тгдтгДтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтгдтг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгжтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтг░тг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгжтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаата┐твптгнтг╜тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тбДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтг╝тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тбАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгатг┐тг╜тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖таАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтв╝тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбДтаАтаАтаАтаАтаАтаАтаАтвАтг╝тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвРтгЫтгЫтг╗тгЫтг╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгзтаАтаАтаАтаАтаАтаАтаАтг╝тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тбАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгнтгнтгнтгнтгнтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтвАтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаРтгТтгТтгТтг▓тгТтгТтгТтг╗тг┐тг┐тг┐тгЯтгЙтгнтгнтгнтгнтгнтгнтгнтг┐тг┐тг┐тгЯтгЛтгнтгнтгнтгнтг╜тгзтаАтаАтаАтаАтаАтв╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгзтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐тгЫтгЫтгЛтгЙтбйтгнтгЩта╗тг┐тг┐тг┐тг┐твЯтгЛтбнтвнтгнтгЭтв┐тг┐таАтаАтаАтаАтаАтв╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгЫтаЫтвЮтгЫтг╢тг╛тг┐тг┐тг┐тг┐тгзтб╣тг┐тг┐тг┐тг╖тг╛твЯтгбтг┐тг┐тбЯтгпта╗тг┐тг╖тг╛тб┐твЛтг╛тг┐таАтаАтаАтаАтаАтв╕тг┐тг┐тг┐тг┐тг┐тбЯтгйтгдтгдтбМтбПтв╕тб┐таЛтгатг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвата╢та╛та╢таДтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тготгнтг╜тгнтгетг╛тг┐тг┐тг┐тбЗтг┐тг╖тгнтгнтгнтг╡тг╛тг┐тг┐таАтаАтаАтаАтаАтг╕тг┐тг┐тг┐тг┐тбЯтв░тг┐тг┐тг┐таЗтбЕтаИтаАта╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтг╕тгАтгжтаШтгЫтгЪтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтв╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтг┐тг┐тг┐тг┐тг┐тгзтбИтаЫтвЫтгбтг╝тбЗтв╕тг┐тг╢тгМтг╗тг┐тг┐тг┐тг┐тг┐тбЯтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтв╕тг┐тг┐тбЖтвЩтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЬтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАта░тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╢тг┐тг┐тг┐тг╖тг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаитгнтбЕтгдтбмтгнтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╜тгЗтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтаИтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таЗтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАта░тгжтаЩтвАтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЯтаАтаАтаАтаАтаАтаАтв╣тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЯтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаЩта┐та┐таЯтвЫтгЫтгЫтгЫтгЯтгЫтг╗тг╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐та┐та┐та┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтаАта╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таЗтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаШтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╢тг╢тг╢тг┐тг┐тг┐тг┐тг┐тг┐тбЯтаБтаАтаАтаАтаАтаАтаАтаАтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАта╣тг┐тг┐тг┐тгЯтгЫтгЫтг╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таАтаАтаАтаАтаАтаАтаАтаАтаАтв╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таЗтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаШтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таБтаАтаАтаАтаАтаАтаАтаАтаАтаАтаИтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЯтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаИта╗тв┐тгЯтгЫтгЫтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таЯтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаШтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таЯтаЛтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгИтгЩта╗тв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таЫтаБтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаЩтаЫта┐тг┐тг┐тг┐тг┐тг┐тг┐та┐таЯтаЙтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАта║тг┐тг╢тг╢тгДтгИтгЫтгЫтгЫтгЫтгЫтгЫтглтгнтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаИтаБтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтбАтв╝тв┐тг┐тг╖тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтгжтгДтбАтвАтгАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАта┐таБта╜тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтв┐тг┐тг┐тгМтв╗тгзтбАтгдтбАтвАтгАтгДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгРтгЪтбУтаВтв╗тгГта╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтгМта╗тг┐тг┐тгЖта╗тазта╣та╖тв╝тг┐тг┐тгЖтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгАтаАтаШтгЫтг╢тг╢тбЫта┐таЖтаРта╕тг┐тбЖтвИтбЫта┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐та┐твБтгжтбМтв┐тг┐тгЖтаАтаАтаАтаАтаИтвЛтг╡тг╖тг╢тбЖтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтватгмтгнтгнтгдтгмтбНтаЙтаБтаАтаАтаАтаАтв╗тг╖таШтг┐тг╢тгмтгНтгЫтгЫтбЫтаЫтаЫтвЫтаЛтгйтг┤тг┐тг┐тг┐тгМта╗тг┐тгЖтаАтаАтаАтвАтг╝тг┐таЯтвЛтбЕтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтаАтгЛтгЩтаЫта┐тг┐тг┐тг┐тгЖтаАтаАтаАтаАтгАтг╝таЯтаИтг┐тг┐тг┐тг┐тг┐тг┐таГтвШтаатбЖтгбтбМтг┐тг┐тг┐тб┐твГтг╢тготгНтгЫтгЫтгЫтгЫтгЙтгдтг╛тг┐тгзтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтаАтаАтватгнтгнтг╡тгдтгдтгНта╣та┐та╖та╢таТтвЪтгЙтгнтгжтг╢тгМта╗тв┐тг┐тг┐тг┐тгДта╕тг╢тг╢тг┐таГтг┐таЫтгбтг┤тг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтаАтватаАтг║тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тбЯтв╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╢тг╢тгжтбМтаБтг┤тг┐таЫтг┐тг┐таИтбАтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЯтг┐тг┐тг┐тбЗтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАтвАтбОтв╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тгзтвШтбЛтг╕тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖твАтбШта┐та┐таЫтвЛтг┤тбЗтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таБтбЯтг╗тг┐тгзтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтаАта╝таЖта┤та╛та┐та┐тв┐тг┐тг┐тг┐тг┐тг┐тг┐таИтвата┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тв╕тг┐тг╖твРтаВтв╕тг┐тбЗтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбПтаШтг░тг┐тг┐тг┐таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтаАтгРтгЫтбГтгЪтгЫтгЫтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтаЗтватг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таИтг┐тг┐таИтбГтв╕тг┐тбЗтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтг░тг┐тг┐тг┐тг┐тбДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '            таАтаАтаАтвРтгЪтгТтбВтгТтгУтг╢тг╢тг┐тг┐тг┐тг┐тг┐тг┐тгПтгАтгРтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐таАтг┐тг┐таРтаЖтв╕тг┐тбЗтг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тбЗтг┐тг┐тг┐тг┐тг┐тг┐тбЖтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаА',
    '',
},
#+END_SRC

** nvim-tree
   #+BEGIN_SRC lua
   --by lazy.nvim install
  {
    "kyazdani42/nvim-tree.lua",
    branch = "master",
    commit = "9914780",
    cmd = { "NvimTreeOpen", "NvimTreeToggle" },
  	dependencies = {
        "kyazdani42/nvim-web-devicons",
        branch = "master",
        commit = "9697285",
        event = "VeryLazy",
    },
    config = function()
    local tree = require'nvim-tree'
    local lib = require'nvim-tree.lib'
    local function cd_dot_cb(node)
      tree.change_dir(vim.fn.getcwd(-1))
      if node.name ~= ".." then
        lib.set_index_and_redraw(node.absolute_path)
      end
    end
    local tree_cb = require'nvim-tree.config'.nvim_tree_callback
    require'nvim-tree'.setup {
        sort_by = "case_sensitive",
        disable_netrw = true, -- disables netrw completely
        hijack_netrw = true, -- hijack netrw window on startup
        open_on_setup = true, -- open the tree when running this setup function
        ignore_ft_on_setup = { "startify", "dashboard", "alpha", }, -- will not open on setup if the filetype is in this list
        open_on_tab = false, -- opens the tree when changing/opening a new tab if the tree wasn't previously opened
        hijack_cursor = true, --- hijack the cursor in the tree to put it at the start of the filename
        update_focused_file = {enable = true, update_cwd = true, ignore_list = {}},
        view = {
            adaptive_size = true,
            number = true,
            relativenumber = false,
            signcolumn = "yes",
            mappings = {
                custom_only = true,
                list = {
                    { key = {"<cr>", "o", "<2-LeftMouse>"}, cb = tree_cb("edit") },
                    { key = {"<Tab>"},                      cb = tree_cb("next_sibling") },
                    --{ key = {"<2-RightMouse>", "<C-]>"},    cb = tree_cb("cd") },
                    { key = "<C-v>",                        cb = tree_cb("vsplit") },
                    { key = "<C-x>",                        cb = tree_cb("split") },
                    { key = "<C-t>",                        cb = tree_cb("tabnew") },
                    --{ key = "<",                            cb = tree_cb("prev_sibling") },
                    --{ key = ">",                            cb = tree_cb("next_sibling") },
                    --{ key = {"P"},                          cb = tree_cb("parent_node") },
                    --{ key = "<BS>",                         cb = tree_cb("close_node") },
                    --{ key = "<S-CR>",                       cb = tree_cb("close_node") },
                    --{ key = "<Tab>",                        cb = tree_cb("preview") },
                    --{ key = "K",                            cb = tree_cb("first_sibling") },
                    --{ key = "J",                            cb = tree_cb("last_sibling") },
                    --{ key = "I",                            cb = tree_cb("toggle_ignored") },
                    --{ key = {"H","<BS>"},                   cb = tree_cb("toggle_dotfiles") },
                    { key = "R",                            cb = tree_cb("refresh") },
                    { key = "c",                            cb = tree_cb("create") },
                    { key = "d",                            cb = tree_cb("remove") },
                    { key = "r",                            cb = tree_cb("rename") },
                    --{ key = "<C-r>",                        cb = tree_cb("full_rename") },
                    { key = "x",                            cb = tree_cb("cut") },
                    { key = "y",                            cb = tree_cb("copy") },
                    { key = "p",                            cb = tree_cb("paste") },
                    { key = "Y",                            cb = tree_cb("copy_name") },
                    --{ key = "Y",                            cb = tree_cb("copy_path") },
                    --{ key = "Y",                            cb = tree_cb("copy_absolute_path") },
                    --{ key = "gy",                           cb = tree_cb("copy_absolute_path") },
                    --{ key = "[c",                           cb = tree_cb("prev_git_item") },
                    --{ key = "]c",                           cb = tree_cb("next_git_item") },
                    { key = {"-","h"},                      cb = tree_cb("dir_up") },
                    --{ key = "s",                            cb = tree_cb("system_open") },
                    --{ key = "s",                            cb = tree_cb("close") },
                    { key = {"q"},                          cb = tree_cb("close") },
                    --{ key = "g?",                           cb = tree_cb("toggle_help") },
                    { key = "<BS>",                            action = "cd_dot",		action_cb = cd_dot_cb, }, -- run_file_command
                },
            },
        },
        renderer = {
            group_empty = true,
            indent_markers = { enable = true, icons = { corner = 'тФФ ', edge = 'тФВ ', none = '  ' } },
            icons = {
                glyphs = {
                    folder = {
                        arrow_closed = "яХФ", -- arrow when folder is closed
                        arrow_open = "яХЕ", -- arrow when folder is open
                    },
                },
            },
            highlight_opened_files = "all", --"none"`, `"icon"`, `"name"` or `"all"`
            root_folder_modifier = ":~",
        },
        actions = {
            use_system_clipboard = true,
            change_dir = {
                enable = false,
                global = true,
                restrict_above_cwd = false,
            },
        },
        filters = {
            dotfiles = true,
        },
    }
    -- change nvim-tree background color (transparency)
    vim.api.nvim_command("hi NvimTreeNormal guibg=none ctermbg=none guifg=none")
    vim.api.nvim_command("hi NvimTreeStatusLine guibg=none ctermbg=none guifg=none")
    vim.api.nvim_command("hi NvimTreeStatusLineNC guibg=none ctermbg=none guifg=none")
    vim.api.nvim_command("hi NvimTreeNormalNC guibg=none ctermbg=none guifg=none")
    --vim.api.nvim_command("hi NvimTreeVertSplit guibg=none ctermbg=none guifg=none")

    -- change color for arrows in tree to light blue
    vim.cmd([[ highlight NvimTreeIndentMarker guifg=#3FC5FF ]])
    end,
  },
   #+END_SRC

** targets.vim
#+BEGIN_SRC lua
-- {{{ text objects  <<┬аtargets.vim >>
vim.cmd[[
" add '<>' in block
autocmd User targets#mappings#user call targets#mappings#extend({
    \ 'b': {
        \'pair': [
            \{'o':'(', 'c':')'},
            \{'o':'[', 'c':']'},
            \{'o':'{', 'c':'}'},
            \{'o':'<', 'c':'>'},
        \ ]
    \},
\})
]]
-- d/c/y  +  i/I/a/A  +  b               (щ╗Шшодф╕║nхРСхП│цРЬч┤в)
-- d/c/y  +  i/I/a/A  +  a               (щ╗Шшодф╕║nхРСхП│цРЬч┤в)
-- d/c/y  +  i/I/a/A  +  q               (щ╗Шшодф╕║nхРСхП│цРЬч┤в)
-- d/c/y  +  2/3/4/...(хПпчЬБчХе)  +  i/I/a/A  +  n/l(хПпчЬБчХе)  +  b
-- d/c/y  +  2/3/4/...(хПпчЬБчХе)  +  i/I/a/A  +  n/l(хПпчЬБчХе)  +  a
-- d/c/y  +  2/3/4/...(хПпчЬБчХе)  +  i/I/a/A  +  n/l(хПпчЬБчХе)  +  q
-- d/c/y  +  i/I/a/A  +  (/[/,/...
-- d/c/y  +  i/I/a/A  +  "/'/`/...
-- --b:block   q:quote    a:argument
-- }}}
#+END_SRC

** iamcco/markdown-preview.nvim
щЬАхоЙшгЕ:nodejs хТМ yarn
1.хоЙшгЕnodejs хТМ yarn. шЛеф╕НшГ╜щвДшзИmarkdown(щАЪш┐З:messцЯечЬЛ,цЬЙvim-node-rpc error)
2.шзгхЖ│щАФх╛Д:щАЪш┐Зч│╗ч╗Я CMD хИ░шпецПТф╗╢ app чЫох╜Хф╕Л(\Vim\vimfiles\bundle\iamcco markdown-preview.nvim\app)цЙзшбМ yarn install хН│хПпф╜┐чФи.

** dashboard header

#+BEGIN_SRC lua
local M = {}

M.default1 = {
	[[                               __                ]],
	[[  ___     ___    ___   __  __ /\_\    ___ ___    ]],
	[[ / _ `\  / __`\ / __`\/\ \/\ \\/\ \  / __` __`\  ]],
	[[/\ \/\ \/\  __//\ \_\ \ \ \_/ |\ \ \/\ \/\ \/\ \ ]],
	[[\ \_\ \_\ \____\ \____/\ \___/  \ \_\ \_\ \_\ \_\]],
	[[ \/_/\/_/\/____/\/___/  \/__/    \/_/\/_/\/_/\/_/]],
}

M.default2 = {
	[[ _______             ____   ____.__         ]],
	[[ \      \   ____  ___\   \ /   /|__| _____  ]],
	[[ /   |   \_/ __ \/  _ \   Y   / |  |/     \ ]],
	[[/    |    \  ___(  <_> )     /  |  |  Y Y  \]],
	[[\____|__  /\___  >____/ \___/   |__|__|_|  /]],
	[[        \/     \/                        \/ ]],
}

M.dos_rebel = {
	[[                                                                       ]],
	[[  тЦИтЦИтЦИтЦИтЦИтЦИ   тЦИтЦИтЦИтЦИтЦИ                   тЦИтЦИтЦИтЦИтЦИ   тЦИтЦИтЦИтЦИтЦИ  тЦИтЦИтЦИ                  ]],
	[[ тЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИ                   тЦСтЦСтЦИтЦИтЦИ   тЦСтЦСтЦИтЦИтЦИ  тЦСтЦСтЦС                   ]],
	[[  тЦСтЦИтЦИтЦИтЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ   тЦИтЦИтЦИтЦИтЦИтЦИ   тЦИтЦИтЦИтЦИтЦИтЦИ  тЦСтЦИтЦИтЦИ    тЦСтЦИтЦИтЦИ  тЦИтЦИтЦИтЦИ  тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИ   ]],
	[[  тЦСтЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИтЦСтЦИтЦИтЦИ  тЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИ тЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ    тЦСтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИ  ]],
	[[  тЦСтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИ тЦСтЦИтЦИтЦИтЦИтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦСтЦИтЦИтЦИ  тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ  ]],
	[[  тЦСтЦИтЦИтЦИ  тЦСтЦСтЦИтЦИтЦИтЦИтЦИ тЦСтЦИтЦИтЦИтЦСтЦСтЦС  тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ  тЦСтЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦС    тЦСтЦИтЦИтЦИ  тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ тЦСтЦИтЦИтЦИ  ]],
	[[  тЦИтЦИтЦИтЦИтЦИ  тЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИ тЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИ     тЦСтЦСтЦИтЦИтЦИ      тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИтЦСтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ ]],
	[[ тЦСтЦСтЦСтЦСтЦС    тЦСтЦСтЦСтЦСтЦС  тЦСтЦСтЦСтЦСтЦСтЦС   тЦСтЦСтЦСтЦСтЦСтЦС       тЦСтЦСтЦС      тЦСтЦСтЦСтЦСтЦС тЦСтЦСтЦСтЦСтЦС тЦСтЦСтЦС тЦСтЦСтЦСтЦСтЦС  ]],
	[[                                                                       ]],
}


M.rowan_cap = {
	[[                                                    ]],
	[[     dMMMMb  dMMMMMP .aMMMb  dMP dMP dMP dMMMMMMMMb ]],
	[[    dMP dMP dMP     dMP"dMP dMP dMP amr dMP"dMP"dMP ]],
	[[   dMP dMP dMMMP   dMP dMP dMP dMP dMP dMP dMP dMP  ]],
	[[  dMP dMP dMP     dMP.aMP  YMvAP" dMP dMP dMP dMP   ]],
	[[ dMP dMP dMMMMMP  VMMMP"    VP"  dMP dMP dMP dMP    ]],
	[[                                                    ]],
}

M.isometric = {
	[[                                                                                   ]],
	[[     /\__\         /\  \         /\  \         /\__\          ___        /\__\     ]],
	[[    /::|  |       /::\  \       /::\  \       /:/  /         /\  \      /::|  |    ]],
	[[   /:|:|  |      /:/\:\  \     /:/\:\  \     /:/  /          \:\  \    /:|:|  |    ]],
	[[  /:/|:|  |__   /::\~\:\  \   /:/  \:\  \   /:/__/  ___      /::\__\  /:/|:|__|__  ]],
	[[ /:/ |:| /\__\ /:/\:\ \:\__\ /:/__/ \:\__\  |:|  | /\__\  __/:/\/__/ /:/ |::::\__\ ]],
	[[ \/__|:|/:/  / \:\~\:\ \/__/ \:\  \ /:/  /  |:|  |/:/  / /\/:/  /    \/__/~~/:/  / ]],
	[[     |:/:/  /   \:\ \:\__\    \:\  /:/  /   |:|__/:/  /  \::/__/           /:/  /  ]],
	[[     |::/  /     \:\ \/__/     \:\/:/  /     \::::/__/    \:\__\          /:/  /   ]],
	[[     /:/  /       \:\__\        \::/  /       ~~~~         \/__/         /:/  /    ]],
	[[     \/__/         \/__/         \/__/                                   \/__/     ]],
	[[                                                                                   ]],
}

M.ogre = {
	[[                                     ]],
	[[      __                _            ]],
	[[   /\ \ \___  ___/\   /(_)_ __ ___   ]],
	[[  /  \/ / _ \/ _ \ \ / | | '_ ` _ \  ]],
	[[ / /\  |  __| (_) \ V /| | | | | | | ]],
	[[ \_\ \/ \___|\___/ \_/ |_|_| |_| |_| ]],
	[[                                     ]],
}

M.slant_relief = {
	[[                                                                                                   ]],
	[[ /\\\\\_____/\\\_______________________________/\\\________/\\\___________________________         ]],
	[[ \/\\\\\\___\/\\\______________________________\/\\\_______\/\\\__________________________         ]],
	[[ _\/\\\/\\\__\/\\\______________________________\//\\\______/\\\___/\\\_____________________       ]],
	[[  _\/\\\//\\\_\/\\\_____/\\\\\\\\______/\\\\\_____\//\\\____/\\\___\///_____/\\\\\__/\\\\\__       ]],
	[[   _\/\\\\//\\\\/\\\___/\\\/////\\\___/\\\///\\\____\//\\\__/\\\_____/\\\__/\\\///\\\\\///\\\_     ]],
	[[    _\/\\\_\//\\\/\\\__/\\\\\\\\\\\___/\\\__\//\\\____\//\\\/\\\_____\/\\\_\/\\\_\//\\\__\/\\\     ]],
	[[     _\/\\\__\//\\\\\\_\//\\///////___\//\\\__/\\\______\//\\\\\______\/\\\_\/\\\__\/\\\__\/\\\_   ]],
	[[      _\/\\\___\//\\\\\__\//\\\\\\\\\\__\///\\\\\/________\//\\\_______\/\\\_\/\\\__\/\\\__\/\\\   ]],
	[[       _\///_____\/////____\//////////_____\/////___________\///________\///__\///___\///___\///__ ]],
	[[                                                                                                   ]],
}

M.ansi_shadow = {
	[[                                                    ]],
	[[ тЦИтЦИтЦИтХЧ   тЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтХЧ   тЦИтЦИтХЧтЦИтЦИтХЧтЦИтЦИтЦИтХЧ   тЦИтЦИтЦИтХЧ ]],
	[[ тЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтХСтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХФтХРтХРтХРтЦИтЦИтХЧтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХСтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтЦИтЦИтХС ]],
	[[ тЦИтЦИтХФтЦИтЦИтХЧ тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХСтЦИтЦИтХФтЦИтЦИтЦИтЦИтХФтЦИтЦИтХС ]],
	[[ тЦИтЦИтХСтХЪтЦИтЦИтХЧтЦИтЦИтХСтЦИтЦИтХФтХРтХРтХЭ  тЦИтЦИтХС   тЦИтЦИтХСтХЪтЦИтЦИтХЧ тЦИтЦИтХФтХЭтЦИтЦИтХСтЦИтЦИтХСтХЪтЦИтЦИтХФтХЭтЦИтЦИтХС ]],
	[[ тЦИтЦИтХС тХЪтЦИтЦИтЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтХЪтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭ тХЪтЦИтЦИтЦИтЦИтХФтХЭ тЦИтЦИтХСтЦИтЦИтХС тХЪтХРтХЭ тЦИтЦИтХС ]],
	[[ тХЪтХРтХЭ  тХЪтХРтХРтХРтХЭтХЪтХРтХРтХРтХРтХРтХРтХЭ тХЪтХРтХРтХРтХРтХРтХЭ   тХЪтХРтХРтХРтХЭ  тХЪтХРтХЭтХЪтХРтХЭ     тХЪтХРтХЭ ]],
	[[                                                    ]],
}

M.bloody = {
	[[                                                     ]],
	[[  тЦИтЦИтЦИтЦД    тЦИ тЦУтЦИтЦИтЦИтЦИтЦИ  тЦТтЦИтЦИтЦИтЦИтЦИ   тЦИтЦИтЦТ   тЦИтЦУ тЦИтЦИтЦУ тЦИтЦИтЦИтЦД тЦДтЦИтЦИтЦИтЦУ ]],
	[[  тЦИтЦИ тЦАтЦИ   тЦИ тЦУтЦИ   тЦА тЦТтЦИтЦИтЦТ  тЦИтЦИтЦТтЦУтЦИтЦИтЦС   тЦИтЦТтЦУтЦИтЦИтЦТтЦУтЦИтЦИтЦТтЦАтЦИтЦА тЦИтЦИтЦТ ]],
	[[ тЦУтЦИтЦИ  тЦАтЦИ тЦИтЦИтЦТтЦТтЦИтЦИтЦИ   тЦТтЦИтЦИтЦС  тЦИтЦИтЦТ тЦУтЦИтЦИ  тЦИтЦТтЦСтЦТтЦИтЦИтЦТтЦУтЦИтЦИ    тЦУтЦИтЦИтЦС ]],
	[[ тЦУтЦИтЦИтЦТ  тЦРтЦМтЦИтЦИтЦТтЦТтЦУтЦИ  тЦД тЦТтЦИтЦИ   тЦИтЦИтЦС  тЦТтЦИтЦИ тЦИтЦСтЦСтЦСтЦИтЦИтЦСтЦТтЦИтЦИ    тЦТтЦИтЦИ  ]],
	[[ тЦТтЦИтЦИтЦС   тЦУтЦИтЦИтЦСтЦСтЦТтЦИтЦИтЦИтЦИтЦТтЦС тЦИтЦИтЦИтЦИтЦУтЦТтЦС   тЦТтЦАтЦИтЦС  тЦСтЦИтЦИтЦСтЦТтЦИтЦИтЦТ   тЦСтЦИтЦИтЦТ ]],
	[[ тЦС тЦТтЦС   тЦТ тЦТ тЦСтЦС тЦТтЦС тЦСтЦС тЦТтЦСтЦТтЦСтЦТтЦС    тЦС тЦРтЦС  тЦСтЦУ  тЦС тЦТтЦС   тЦС  тЦС ]],
	[[ тЦС тЦСтЦС   тЦС тЦТтЦС тЦС тЦС  тЦС  тЦС тЦТ тЦТтЦС    тЦС тЦСтЦС   тЦТ тЦСтЦС  тЦС      тЦС ]],
	[[    тЦС   тЦС тЦС    тЦС   тЦС тЦС тЦС тЦТ       тЦСтЦС   тЦТ тЦСтЦС      тЦС    ]],
	[[          тЦС    тЦС  тЦС    тЦС тЦС        тЦС   тЦС         тЦС    ]],
	[[                                 тЦС                   ]],
	[[                                                     ]],
}

M.delta_corps_priest1 = {
	[[                                                                   ]],
	[[ тЦИтЦИтЦИтЦДтЦДтЦДтЦД      тЦДтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИ  тЦДтЦИтЦИтЦИтЦИтЦИтЦИтЦД   тЦДтЦИ    тЦИтЦД   тЦДтЦИ    тЦДтЦДтЦДтЦДтЦИтЦИтЦИтЦДтЦДтЦДтЦД   ]],
	[[ тЦИтЦИтЦИтЦАтЦАтЦАтЦИтЦИтЦД   тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ  тЦДтЦИтЦИтЦАтЦАтЦАтЦИтЦИтЦИтЦАтЦАтЦАтЦИтЦИтЦД ]],
	[[ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ    тЦИтЦА  тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИтЦМ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ ]],
	[[ тЦИтЦИтЦИ   тЦИтЦИтЦИ  тЦДтЦИтЦИтЦИтЦДтЦДтЦД     тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИтЦМ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ ]],
	[[ тЦИтЦИтЦИ   тЦИтЦИтЦИ тЦАтЦАтЦИтЦИтЦИтЦАтЦАтЦА     тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИтЦМ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ ]],
	[[ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ    тЦИтЦД  тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ  тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ ]],
	[[ тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ    тЦИтЦИтЦИ тЦИтЦИтЦИ  тЦИтЦИтЦИ   тЦИтЦИтЦИ   тЦИтЦИтЦИ ]],
	[[  тЦАтЦИ   тЦИтЦА    тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИ  тЦАтЦИтЦИтЦИтЦИтЦИтЦИтЦА   тЦАтЦИтЦИтЦИтЦИтЦИтЦИтЦА  тЦИтЦА    тЦАтЦИ   тЦИтЦИтЦИ   тЦИтЦА  ]],
	[[                                                                   ]],
}

M.elite = {
	[[                                   ]],
	[[  тЦР тЦД тЦДтЦДтЦД .       тЦМ тЦР┬╖тЦк  тАв тЦМ тЦД ┬╖.  ]],
	[[ тАвтЦИтЦМтЦРтЦИтЦАтЦД.тЦА┬╖тЦк     тЦктЦИ┬╖тЦИтЦМтЦИтЦИ ┬╖тЦИтЦИ тЦРтЦИтЦИтЦИтЦк ]],
	[[ тЦРтЦИтЦРтЦРтЦМтЦРтЦАтЦАтЦктЦД тЦДтЦИтЦАтЦД тЦРтЦИтЦРтЦИтАвтЦРтЦИ┬╖тЦРтЦИ тЦМтЦРтЦМтЦРтЦИ┬╖ ]],
	[[ тЦИтЦИтЦРтЦИтЦМтЦРтЦИтЦДтЦДтЦМтЦРтЦИтЦМ.тЦРтЦМ тЦИтЦИтЦИ тЦРтЦИтЦМтЦИтЦИ тЦИтЦИтЦМтЦРтЦИтЦМ ]],
	[[ тЦАтЦА тЦИтЦк тЦАтЦАтЦА  тЦАтЦИтЦДтЦАтЦк. тЦА  тЦАтЦАтЦАтЦАтЦА  тЦИтЦктЦАтЦАтЦА ]],
	[[                                   ]],
}

M.the_edge = {
	[[                                       ]],
	[[    тЦД   тЦДтЦИтЦИтЦИтЦД   тЦИтЦИтЦИтЦИтЦД     тЦД   тЦДтЦИ тЦИтЦАтЦДтЦАтЦИ ]],
	[[     тЦИ  тЦИтЦА   тЦА  тЦИ   тЦИ      тЦИ  тЦИтЦИ тЦИ тЦИ тЦИ ]],
	[[ тЦИтЦИ   тЦИ тЦИтЦИтЦДтЦД    тЦИ   тЦИ тЦИ     тЦИ тЦИтЦИ тЦИ тЦД тЦИ ]],
	[[ тЦИ тЦИ  тЦИ тЦИтЦД   тЦДтЦА тЦАтЦИтЦИтЦИтЦИ  тЦИ    тЦИ тЦРтЦИ тЦИ   тЦИ ]],
	[[ тЦИ  тЦИ тЦИ тЦАтЦИтЦИтЦИтЦА           тЦИ  тЦИ   тЦР    тЦИ  ]],
	[[ тЦИ   тЦИтЦИ                  тЦИтЦР        тЦА   ]],
	[[                         тЦР             ]],
	[[                                       ]],
}

M.banner3 = {
	[[                                                      ]],
	[[ ##    ## ########  #######  ##     ## #### ##     ## ]],
	[[ ###   ## ##       ##     ## ##     ##  ##  ###   ### ]],
	[[ ####  ## ##       ##     ## ##     ##  ##  #### #### ]],
	[[ ## ## ## ######   ##     ## ##     ##  ##  ## ### ## ]],
	[[ ##  #### ##       ##     ##  ##   ##   ##  ##     ## ]],
	[[ ##   ### ##       ##     ##   ## ##    ##  ##     ## ]],
	[[ ##    ## ########  #######     ###    #### ##     ## ]],
	[[                                                      ]],
}

M.colossal = {
	[[                                                            ]],
	[[ 888b    888                  888     888 d8b               ]],
	[[ 8888b   888                  888     888 Y8P               ]],
	[[ 88888b  888                  888     888                   ]],
	[[ 888Y88b 888  .d88b.   .d88b. Y88b   d88P 888 88888b.d88b.  ]],
	[[ 888 Y88b888 d8P  Y8b d88""88b Y88b d88P  888 888 "888 "88b ]],
	[[ 888  Y88888 88888888 888  888  Y88o88P   888 888  888  888 ]],
	[[ 888   Y8888 Y8b.     Y88..88P   Y888P    888 888  888  888 ]],
	[[ 888    Y888  "Y8888   "Y88P"     Y8P     888 888  888  888 ]],
	[[                                                            ]],
}

M.decimal = {
	[[                       ]],
	[[ 78 101 111 86 105 109 ]],
	[[                       ]],
}

M.def_leppard = {
	[[                                                                         ]],
	[[                               :                                         ]],
	[[ L.                     ,;    t#,                                        ]],
	[[ EW:        ,ft       f#i    ;##W.              t                        ]],
	[[ E##;       t#E     .E#t    :#L:WE              Ej            ..       : ]],
	[[ E###t      t#E    i#W,    .KG  ,#D  t      .DD.E#,          ,W,     .Et ]],
	[[ E#fE#f     t#E   L#D.     EE    ;#f EK:   ,WK. E#t         t##,    ,W#t ]],
	[[ E#t D#G    t#E :K#Wfff;  f#.     t#iE#t  i#D   E#t        L###,   j###t ]],
	[[ E#t  f#E.  t#E i##WLLLLt :#G     GK E#t j#f    E#t      .E#j##,  G#fE#t ]],
	[[ E#t   t#K: t#E  .E#L      ;#L   LW. E#tL#i     E#t     ;WW; ##,:K#i E#t ]],
	[[ E#t    ;#W,t#E    f#E:     t#f f#:  E#WW,      E#t    j#E.  ##f#W,  E#t ]],
	[[ E#t     :K#D#E     ,WW;     f#D#;   E#K:       E#t  .D#L    ###K:   E#t ]],
	[[ E#t      .E##E      .D#;     G#t    ED.        E#t :K#t     ##D.    E#t ]],
	[[ ..         G#E        tt      t     t          E#t ...      #G      ..  ]],
	[[             fE                                 ,;.          j           ]],
	[[              ,                                                          ]],
	[[                                                                         ]],
}

M.larry_3d = {
	[[                                                     ]],
	[[  __  __                 __  __                      ]],
	[[ /\ \/\ \               /\ \/\ \  __                 ]],
	[[ \ \ `\\ \     __    ___\ \ \ \ \/\_\    ___ ___     ]],
	[[  \ \ , ` \  /'__`\ / __`\ \ \ \ \/\ \ /' __` __`\   ]],
	[[   \ \ \`\ \/\  __//\ \L\ \ \ \_/ \ \ \/\ \/\ \/\ \  ]],
	[[    \ \_\ \_\ \____\ \____/\ `\___/\ \_\ \_\ \_\ \_\ ]],
	[[     \/_/\/_/\/____/\/___/  `\/__/  \/_/\/_/\/_/\/_/ ]],
	[[                                                     ]],
}

M.lean = {
	[[                                                                  ]],
	[[     _/      _/                      _/      _/  _/               ]],
	[[    _/_/    _/    _/_/      _/_/    _/      _/      _/_/_/  _/_/  ]],
	[[   _/  _/  _/  _/_/_/_/  _/    _/  _/      _/  _/  _/    _/    _/ ]],
	[[  _/    _/_/  _/        _/    _/    _/  _/    _/  _/    _/    _/  ]],
	[[ _/      _/    _/_/_/    _/_/        _/      _/  _/    _/    _/   ]],
	[[                                                                  ]],
}

M.morse = {
	[[                     ]],
	[[ -. . --- ...- .. -- ]],
	[[                     ]],
}

M.sharp = {
	[[                                                                       ]],
	[[                                              юВ║юВ╕                       ]],
	[[       юВ║тЦИтЦИтЦИтЦИюВ╕ юВ║тЦИтЦИтЦИтЦИтЦИтЦИюВ╝           юВ╛тЦИтЦИтЦИтЦИтЦИюВ╕      юВ╛тЦИтЦИюВ╝                     ]],
	[[      юВ║тЦИтЦИтЦИтЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИюВ╝             юВ╛тЦИтЦИтЦИтЦИтЦИюВ╕ юВ╕                            ]],
	[[      юВ║тЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╕юВ╛тЦИтЦИюВ╝ юВ║тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╝юВ║тЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИюВ╕тЦИтЦИтЦИ тЦИтЦИтЦИюВ╕   юВ║тЦИтЦИтЦИюВ╕тЦИтЦИтЦИтЦИюВ╕тЦИтЦИтЦИтЦИюВ╕   ]],
	[[     юВ║тЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╝  юВ║тЦИтЦИтЦИюВ╝    юВ║тЦИтЦИтЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИюВ╛тЦИтЦИтЦИтЦИюВ╛тЦИтЦИтЦИтЦИтЦИ   ]],
	[[    юВ║тЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИюВ╝ юВ║тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╝юВ║тЦИтЦИюВ╝ юВ╛тЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ   ]],
	[[  юВ║тЦИтЦИтЦИтЦИтЦИтЦИюВ╝юВ╛тЦИтЦИтЦИтЦИтЦИюВ╝ юВ║тЦИтЦИтЦИюВ╝    юВ║тЦИтЦИтЦИюВ╕ юВ║тЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИюВ╕  ]],
	[[ юВ║тЦИтЦИтЦИтЦИтЦИтЦИюВ╝  юВ╛тЦИтЦИтЦИюВ╝юВ║тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╕юВ╛тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИюВ╝ юВ╛тЦИтЦИтЦИтЦИюВ╝ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИ тЦИтЦИтЦИтЦИтЦИтЦИюВ╕ ]],
	[[                                                                       ]],
}

    header = {
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[   тЦДтЦИтЦИтЦИтЦИтЦД              тЦТтЦТтЦТтЦТтЦТ   ]],
      [[  тЦИтЦИтЦИтЦДтЦИтЦА              тЦТ тЦДтЦТ тЦДтЦТ  ]],
      [[ тЦРтЦИтЦИтЦИтЦИ     тЦИ  тЦИ  тЦИ   тЦТтЦТтЦТтЦТтЦТтЦТтЦТтЦТтЦТ ]],
      [[  тЦИтЦИтЦИтЦИтЦИтЦД             тЦТтЦТтЦТтЦТтЦТтЦТтЦТтЦТтЦТ ]],
      [[   тЦАтЦИтЦИтЦИтЦИтЦА            тЦТ тЦТ тЦТ тЦТ тЦТ ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
      [[                               ]],
    },

        header = {
            [[                                                                                   ]],
            [[                                                                                   ]],
            [[                                                                                   ]],
            [[ =================     ===============     ===============   ========  ========    ]],
            [[ \\ . . . . . . .\\   //. . . . . . .\\   //. . . . . . .\\  \\. . .\\// . . //    ]],
            [[ ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\/ . . .||    ]],
            [[ || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||    ]],
            [[ ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||    ]],
            [[ || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\ . . . . ||    ]],
            [[ ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\_ . .|. .||    ]],
            [[ || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\ `-_/| . ||    ]],
            [[ ||_-' ||  .|/    || ||    \|.  || `-_|| ||_-' ||  .|/    || ||   | \  / |-_.||    ]],
            [[ ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \  / |  `||    ]],
            [[ ||    `'         || ||         `'    || ||    `'         || ||   | \  / |   ||    ]],
            [[ ||            .===' `===.         .==='.`===.         .===' /==. |  \/  |   ||    ]],
            [[ ||         .=='   \_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \/  |   ||    ]],
            [[ ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \/  |   ||    ]],
            [[ ||   .=='    _-'          '-__\._-'         '-_./__-'         `' |. /|  |   ||    ]],
            [[ ||.=='    _-'                                                     `' |  /==.||    ]],
            [[ =='    _-'                        N E O V I M                         \/   `==    ]],
            [[ \   _-'                                                                `-_   /    ]],
            [[  `''                                                                      ``'     ]],
            [[                                                                                   ]],
        }, --your header
  local header = {
    "                     ______________               ",
    "                    /             /|              ",
    "                   /             / |              ",
    "                  /____________ /  |              ",
    "                 | ___________ |   |              ",
    "                 ||$ nvim тЦИ   ||   |              ",
    "                 ||           ||   |              ",
    "                 ||           ||   |              ",
    "                 ||___________||   |              ",
    "                 |   _______   |  /               ",
    "                /|  (_______)  | /                ",
    "               ( |_____________|/                 ",
    "               \\                                 ",
    "            .=======================.             ",
    "            | ::::::::::::::::  ::: |             ",
    "            | ::::::::::::::[]  ::: |             ",
    "            |   -----------     ::: |             ",
    "            `-----------------------`             ",
  }
return M

 header ={
       [[                           ]],
       [[                           ]],
       [[  o                        ]],
       [[   o   ^__^                ]],
       [[    o  (oo)\_______        ]],
       [[       (__)\       )\/\    ]],
       [[           ||----w |       ]],
       [[           ||     ||       ]],
       [[                           ]],
       [[                           ]],
 },
vim.g.dashboard_custom_header = {
       "            :h-                                  Nhy`               ",
       "           -mh.                           h.    `Ndho               ",
       "           hmh+                          oNm.   oNdhh               ",
       "          `Nmhd`                        /NNmd  /NNhhd               ",
       "          -NNhhy                      `hMNmmm`+NNdhhh               ",
       "          .NNmhhs              ```....`..-:/./mNdhhh+               ",
       "           mNNdhhh-     `.-::///+++////++//:--.`-/sd`               ",
       "           oNNNdhhdo..://++//++++++/+++//++///++/-.`                ",
       "      y.   `mNNNmhhhdy+/++++//+/////++//+++///++////-` `/oos:       ",
       " .    Nmy:  :NNNNmhhhhdy+/++/+++///:.....--:////+++///:.`:s+        ",
       " h-   dNmNmy oNNNNNdhhhhy:/+/+++/-         ---:/+++//++//.`         ",
       " hd+` -NNNy`./dNNNNNhhhh+-://///    -+oo:`  ::-:+////++///:`        ",
       " /Nmhs+oss-:++/dNNNmhho:--::///    /mmmmmo  ../-///++///////.       ",
       "  oNNdhhhhhhhs//osso/:---:::///    /yyyyso  ..o+-//////////:/.      ",
       "   /mNNNmdhhhh/://+///::://////     -:::- ..+sy+:////////::/:/.     ",
       "     /hNNNdhhs--:/+++////++/////.      ..-/yhhs-/////////::/::/`    ",
       "       .ooo+/-::::/+///////++++//-/ossyyhhhhs/:///////:::/::::/:    ",
       "       -///:::::::////++///+++/////:/+ooo+/::///////.::://::---+`   ",
       "       /////+//++++/////+////-..//////////::-:::--`.:///:---:::/:   ",
       "       //+++//++++++////+++///::--                 .::::-------::   ",
       "       :/++++///////////++++//////.                -:/:----::../-   ",
       "       -/++++//++///+//////////////               .::::---:::-.+`   ",
       "       `////////////////////////////:.            --::-----...-/    ",
       "        -///://////////////////////::::-..      :-:-:-..-::.`.+`    ",
       "         :/://///:///::://::://::::::/:::::::-:---::-.-....``/- -   ",
       "           ::::://::://::::::::::::::----------..-:....`.../- -+oo/ ",
       "            -/:::-:::::---://:-::-::::----::---.-.......`-/.      ``",
       "           s-`::--:::------:////----:---.-:::...-.....`./:          ",
       "          yMNy.`::-.--::..-dmmhhhs-..-.-.......`.....-/:`           ",
       "         oMNNNh. `-::--...:NNNdhhh/.--.`..``.......:/-              ",
       "        :dy+:`      .-::-..NNNhhd+``..`...````.-::-`                ",
       "                        .-:mNdhh:.......--::::-`                    ",
       "                           yNh/..------..`                          ",
       "                                                                    ",
}

#+END_SRC

** Shatur/neovim-session-manager
   #+BEGIN_SRC lua
  --{
    "Shatur/neovim-session-manager",
    cmd = "SessionManager",
    dependencies = { "nvim-lua/plenary.nvim" },
    init = function()
    require('session_manager').setup({
        --sessions_dir = require('plenary.path'):new(vim.fn.stdpath('data'), 'sessions'), -- 'C:/Users/ThinkPad/AppData/Local/nvim-data/sessions'
        sessions_dir = "C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/SessionManager_temp",
        path_replacer = '__', -- The character to which the path separator will be replaced for session files.
        colon_replacer = '++', -- The character to which the colon symbol will be replaced for session files.
        autoload_mode = require('session_manager.config').AutoloadMode.Disabled, -- Define what to do when Neovim is started without arguments. Possible values: Disabled, CurrentDir, LastSession
        autosave_last_session = true, -- Automatically save last session on exit and on session switch.
        autosave_ignore_not_normal = true, -- Plugin will not save a session when no buffers are opened, or all of them aren't writable or listed.
        autosave_ignore_filetypes = { -- All buffers of these file types will be closed before the session is saved.
          'gitcommit',
          'gitrebase',
          'neo-tree',
        },
        autosave_only_in_session = false, -- Always autosaves session. If true, only autosaves after a session is active.
        max_path_length = 80,  -- Shorten the display path if length exceeds this threshold. Use 0 if don't want to shorten the path at all.
    })
    end,
  --},
   #+END_SRC

** matlib_ls
   #+BEGIN_SRC lua
    --[[ require('lspconfig').matlab_ls.setup {
        capabilities = require("cmp_nvim_lsp").default_capabilities(vim.lsp.protocol.make_client_capabilities()),
        settings = {
            matlab = {
              indexWorkspace = false,
              -- installPath = "D:/Program Files/MATLAB/R2016b",
    	      installPath = "F:/Program Files/MATLAB/R2022a",
              matlabConnectionTiming = "onStart",
              telemetry = true
            },
        },
    } ]]
    -- matlab LSP
    require('lspconfig').matlab_ls.setup {
      filetypes = { 'matlab' },
      root_dir = function(fname)
        return require "lspconfig/util".find_git_ancestor(fname) or vim.fn.getcwd()
      end,
      -- single_file_support = false,
      settings = {
        matlab = {
          indexWorkspace = false,
          installPath = '',
           -- installPath = "D:/Program Files/MATLAB/R2016b",
    	  -- installPath = "F:\\Program Files\\MATLAB\\R2022a",
          matlabConnectionTiming = 'onStart',
          telemetry = true,
          documentFormattingProvider = true,
          signatureHelpProvider=true,
          hoverProvider=true,
          completionProvider=true,
          codeActionProvider=true,
          documentSymbol=true,
          publishDiagnostics=true,
        },
      },
      handlers = {
        ['workspace/configuration'] = function(_, _, ctx)
          local client = vim.lsp.get_client_by_id(ctx.client_id)
          return { client.config.settings.matlab }
        end,
      },
    }
   #+END_SRC

** leap.nvim and eyeliner.nvim
   #+BEGIN_SRC lua
-- lazy
  {
    "ggandor/leap.nvim",
    keys = {"r"},
    config = function()
        local leap =require('leap')
        leap.opts.highlight_unlabeled_phase_one_targets = true
        vim.api.nvim_command("hi LeapBackdrop guifg=#737994") --dim color
        -- vim.api.nvim_set_hl(0, 'LeapBackdrop', { link = 'Comment' }) -- or some grey
	    leap.opts.highlight_unlabeled_phase_one_targets = true
	    leap.opts.safe_labels = {}
	    leap.opts.labels = { 'a', 'r', 's', 't', 'n', 'e', 'i', 'o', 'w', 'f', 'u', 'y', 'd', 'h' }
        neomap({"n", "x", "o"}, "r", function ()
            local current_window = vim.fn.win_getid()
            leap.leap { target_windows = { current_window } }
        end)
    end,
  },
  {
    "jinh0/eyeliner.nvim",
    keys = {"f", "F", "t", "T"},
    config = function()
    require'eyeliner'.setup {
      highlight_on_key = true, -- show highlights only after keypress
      dim = true,              -- dim all other characters if set to true (recommended!)
    }
    end,
  },

-- highlihgt config
if vim.fn.exists('&bg') and vim.fn.eval('&bg') == 'dark' then
    -- eyeliner color
    vim.api.nvim_set_hl(0, 'EyelinerPrimary', { fg='#b5e395', bold = true, underline = false })
    vim.api.nvim_set_hl(0, 'EyelinerSecondary', { fg='#d73a4a', underline = false })
elseif vim.fn.exists('&bg') and vim.fn.eval('&bg') == 'light' then
    -- eyeliner color
    vim.api.nvim_set_hl(0, 'EyelinerPrimary', { fg='#000000', bold = true, underline = false })
    vim.api.nvim_set_hl(0, 'EyelinerSecondary', { fg='#e43542', underline = false })
end
   #+END_SRC

** leaderf
   shortcut:
    <C-R> : switch between fuzzy search mode and regex mode.
    <C-F> : switch between full path search mode and name only search mode.
    <Tab> : switch to normal mode.

    <C-t> : open in new tabpage.
    <C-]> : open in vertical split window.

    <C-S> : select multiple files.


** telescope
   #+BEGIN_SRC lua
-- {{{ nvim-telescope/telescope.nvim
  {
    "nvim-telescope/telescope.nvim",
    cmd = { "Telescope" },
	keys = {
		{ "<localleader>fg", mode = { "n" }, "<cmd>Telescope find_files<cr>", desc = "File" },
		{ "<localleader>fb", mode = { "n" }, ":Telescope file_browser path=:/<left><left>", desc = "File Browser" },
		{ "<localleader>ff", mode = { "n" }, "<cmd>Telescope live_grep<cr>", desc = "Fuzzy word" },
		{ "<localleader>fc", mode = { "n" }, "<cmd>Telescope command_history<cr>", desc = "Command History" },
		{ "<localleader>fr", mode = { "n" }, "<cmd>Telescope oldfiles<cr>", desc = "Recently Files" },
		{ "<localleader>fl", mode = { "n" }, "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Line" },
		{ "<localleader>fs", mode = { "n" }, "<cmd>Telescope search_history<cr>", desc = "Search History" },
	},
    dependencies = {
        {
        "nvim-telescope/telescope-file-browser.nvim",
        config =function()
        require("telescope").load_extension "file_browser"
        end,
        },
        { "nvim-lua/plenary.nvim" },
    },
    config = function()
    require("telescope").setup {
        defaults = {
            initial_mode = 'normal',
            prompt_prefix = "яСл ",
            selection_caret = "яБд ",
            path_display = { "smart" },
            dynamic_preview_title = true,
        },
        pickers = {
            find_files = {
            hidden = true,
            --find_command = { "fd", "f" },
            find_command = { "rg", "--files" },
            mappings = {
                n = {
                    ["cd"] = function(prompt_bufnr)
                    local selection = require("telescope.actions.state").get_selected_entry()
                    local dir = vim.fn.fnamemodify(selection.path, ":p:h")
                    require("telescope.actions").close(prompt_bufnr)
                    -- Depending on what you want put `cd`, `lcd`, `tcd`
                    vim.cmd(string.format("silent lcd %s", dir))
                end
                }
            }
            },
       },
        extensions = {
            file_browser = {
            theme = "ivy",
            hijack_netrw = true,
            },
        },
    }
    end,
  },
-- }}}
   #+END_SRC


** orgmode
   #+BEGIN_SRC lua
-- {{{ nvim-telescope/telescope.nvim
-- org-colors-doom-one
    vim.api.nvim_set_hl(0, "@org.headline.level1", { fg = "#51afef" })
    vim.api.nvim_set_hl(0, "@org.headline.level2", { fg = "#c678dd" })
    vim.api.nvim_set_hl(0, "@org.headline.level3", { fg = "#98be65" })
    vim.api.nvim_set_hl(0, "@org.headline.level4", { fg = "#da8548" })
    vim.api.nvim_set_hl(0, "@org.headline.level5", { fg = "#5699af" })
    vim.api.nvim_set_hl(0, "@org.headline.level6", { fg = "#a9a1e1" })
    vim.api.nvim_set_hl(0, "@org.headline.level7", { fg = "#46d9ff" })
    vim.api.nvim_set_hl(0, "@org.headline.level8", { fg = "#ff6c6b" })
-- }}}
   #+END_SRC


** nvim-cmp
   #+BEGIN_SRC lua
-- {{{ hrsh7th/nvim-cmp
    {
        "hrsh7th/nvim-cmp",
        event = { "InsertEnter", "CmdlineEnter" },
        dependencies = {
            { "L3MON4D3/LuaSnip",
              config = function()
              require("luasnip/loaders/from_vscode").lazy_load({ paths = {"C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/friendly-snippets"}})
              end,
              init = function()
              neomap("n", "<leader>rsm", ":<C-U>e C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/friendly-snippets/snippets/add_snippets/matlab.json<CR>", { desc = 'Snippets: [M]atlab' })
              neomap("n", "<leader>rsp", ":<C-U>e C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/friendly-snippets/snippets/python/Maxl_python.json<CR>", { desc = 'Snippets: [P]ython' })
              neomap("n", "<leader>rso", ":<C-U>e C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/friendly-snippets/snippets/org.json<CR>", { desc = 'Snippets: [O]rg' })
              neomap("n", "<leader>rsl", ":<C-U>e C:/Users/ThinkPad/AppData/Roaming/Code/User/snippets/latex.json<CR>", { desc = 'Snippets: [L]aTeX' })
              end,
            },
            { "hrsh7th/cmp-nvim-lsp" },
            { "hrsh7th/cmp-buffer" },
            { "hrsh7th/cmp-path" },
            { "hrsh7th/cmp-emoji" },
            { "hrsh7th/cmp-calc" },
            { "mstanciu552/cmp-matlab" },
            { "lukas-reineke/cmp-under-comparator" },
            { "ray-x/cmp-treesitter" },
            { "saadparwaiz1/cmp_luasnip" },
            { "onsails/lspkind.nvim",
                branch = "master",
                commit = "c68b3a0",
                config = function()
                    local lspkind_icons = require('lspkind').presets['default']
                    lspkind_icons['Constructor']   = ' яРг '-- юИП
                    lspkind_icons['Field']         = ' юШд '-- тМШ юнЯ
                    lspkind_icons['Interface']     = ' я░о '
                    lspkind_icons['Unit']          = ' юкЦ '
                    lspkind_icons['Snippet']       = ' яСП '-- тЬВя╕П  яГД яСП
                    lspkind_icons['Reference']     = ' яа╕ '
                    lspkind_icons['Struct']        = ' янД '-- яЖ│
                    lspkind_icons['Event']         = ' юкЖ '
                    lspkind_icons['TypeParameter'] = ' яЮГ '
                    lspkind_icons['Text']          = ' яЭ╛ '
                    lspkind_icons['Method']        = ' яЪж '
                    lspkind_icons['Function']      = ' ╞Т '-- яЮФ╞ТяВЪ
                    lspkind_icons['Variable']      = ' яФк '
                    lspkind_icons['Class']         = ' я┤п '
                    lspkind_icons['Module']        = ' яТЗ '
                    lspkind_icons['Property']      = ' я░а '
                    lspkind_icons['Value']         = ' явЯ '
                    lspkind_icons['Enum']          = ' яЕЭ '
                    lspkind_icons['Keyword']       = ' яаК '
                    lspkind_icons['Color']         = ' ягЧ '
                    lspkind_icons['File']          = ' яЬШ '
                    lspkind_icons['Folder']        = ' яЭК '
                    lspkind_icons['EnumMember']    = ' яЕЭ '
                    lspkind_icons['Constant']      = ' яг╛ '
                    lspkind_icons['Operator']      = ' яЪФ '
                    -- treesitter
                    lspkind_icons['String']          = ' яА▒ ' -- юоН
                    lspkind_icons['KeywordOperator'] = ' яЪФ '
                    lspkind_icons['Error']           = ' яБЧ '
                    lspkind_icons['Comment']         = ' є░ЖЙ ' -- яЩ╣
                    lspkind_icons['Boolean']         = ' юкП ' -- яБВ
                    lspkind_icons['Conditional']     = ' яДи '
                    lspkind_icons['KeywordReturn']   = ' є░МС '
                    lspkind_icons['Repeat']          = ' є░СЦ '
                    lspkind_icons['ConstantBuiltin'] = ' яг╛ ' -- юИм
                    lspkind_icons['Number']          = ' явЯ '
                    lspkind_icons['Float']           = ' явЯ '
                    lspkind_icons['FunctionCall']    = ' яЮФ '
                    lspkind_icons['KeywordFunction'] = ' яЮФ '
                    lspkind_icons['StringEscape']    = ' є▒ФБ '
                    lspkind_icons['Spell']           = ' язЕ'
                    lspkind_icons["KeywordConditional"]  = ' юнв '
                    lspkind_icons["KeywordRepeat"]       = ' яеХ' -- яег
                    lspkind_icons['Orgtsblock']          = ' тмЫ'
                    lspkind_icons['Orgtsheadlinelevel1'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel2'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel3'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel4'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel5'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel6'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel7'] = ' тЧЙ '
                    lspkind_icons['Orgtsheadlinelevel8'] = ' тЧЙ '
                    lspkind_icons['Orgtscheckbox']        = ' яЩХ '
                    lspkind_icons['Orgtscheckboxchecked'] = ' яАМ '
                end,
            },
            { "dmitmel/cmp-cmdline-history" },
            {
                "hrsh7th/cmp-cmdline",
                config = function()
                    local cmp = require'cmp'
                    require("cmp").setup.cmdline({ "/", "?" }, {
                        mapping = require("cmp").mapping.preset.cmdline({
                            ['<Tab>'] = cmp.mapping(cmp.mapping.confirm({ select = true }), { 'i', 'c' }),
                        }),
                        sources = require("cmp").config.sources({
                            { name = "buffer", keyword_length = 1 },
                            { name = 'cmdline_history' },
                        }),
                    })
                    require("cmp").setup.cmdline(":", {
                        mapping = require("cmp").mapping.preset.cmdline({
                            ['<Tab>'] = cmp.mapping(cmp.mapping.confirm({ select = true }), { 'i', 'c' }),
                        }),
                        sources = require("cmp").config.sources({
                            { name = "path", keyword_length = 1 },
                            { name = "cmdline", keyword_length = 1 },
                            { name = 'cmdline_history' },
                        }),
                    })
                end,
            },
            {
                "uga-rosa/cmp-dictionary",
                branch = "main",
                commit = "93f3e2c",
                config = function()
                    require("cmp_dictionary").setup({
                        dic = {
                            --["*"] = { "C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/Directionary-8813.dic" },
                            ["*"] = { "C:/Users/ThinkPad/AppData/Local/nvim-data/Maxl/Directionary-69903.dic" },
                        },
                        exact = 2,
                        first_case_insensitive = true,
                        document = false,
                        document_command = "wn %s -over",
                        async = true,     --If you are using a very large dictionary and the body operation is blocked, try 'true'
                        max_items = -1,   --This is the maximum number of candidates that this source will return to the nvim-cmp body. -1 means no limit.
                        capacity = 5,
                        debug = false,
                    })
                    --require("cmp_dictionary").update() -- THIS
                    vim.cmd("CmpDictionaryUpdate")
                end,
            },
        },
        config = function()
            require 'luasnip'.config.setup {}
            local cmp = require('cmp')
            local lspkind = require('lspkind')
            local source_mapping = {
                nvim_lsp        = ' я▓│ ', --[LSP]
                path            = ' юЧ╛ ', --[PATH] ЁЯЦл
                luasnip         = ' юкЖ ',
                buffer          = ' ямШ ', --[BUF]
                calc            = ' яЗм ', --[CALC] юнд
                emoji           = ' янВ ', --[EMOJI] ЁЯШД
                cmp_matlab      = '[ябЧ]', --[MAT] [M]
                dictionary      = ' яЗВ ', --[Dict] юЬЛ
                treesitter      = ' юИЬ ', --[TS] яЖ╗
                orgmode         = ' юШ│ ', --[Org]
                cmdline         = ' я░й ', -- япж яГл юйб яЦа я░й я│║
                cmdline_history = ' яЗЪ ',
                -- latex_symbols = '[TEX]',
                -- nuspell       = '[SPELL]',
                -- spell         = 'язЕ[SPELL]',
            }
            cmp.setup({
                completion = {
                    completeopt = "menu,menuone,noinsert",
                },
                window = {
                    completion = {
                        side_padding = 0,
                        col_offset = -4,
                        -- border = "rounded",
                        -- border = { "тХн", " ", "тХо", "тФВ", "тХп", "тФА", "тХ░", "тФВ" },
                        border = { "тХн", " ", "тХо", "тФВ", "тХп", " ", "тХ░", "тФВ" },
                        scrollbar = true,
                        winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
                        -- winhighlight = "FloatBorder:FloatBorder,CursorLine:CursorLine",
                    },
                    documentation = {
                        max_width = 50,
                        -- border = "rounded",
                        border = { "тФМ", " ", "тФР", "тФВ", "тФШ", " ", "тФФ", "тФВ" },
                        scrollbar = true,
                        winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
                        -- winhighlight = "Normal:CmpPmenu,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None",
                    },
                },
                snippet = {
                    expand = function(args)
                        require('luasnip').lsp_expand(args.body)
                    end,
                },
                sorting = {
                    priority_weight = 2,
                    comparators = {
                        require("cmp-under-comparator").under,
                        cmp.config.compare.kind,
                        cmp.config.compare.sort_text,
                        cmp.config.compare.length,
                        cmp.config.compare.order,
                    },
                },
                mapping = cmp.mapping.preset.insert({
                    ["<C-k>"] = cmp.mapping(cmp.mapping.select_prev_item(), { "i", "c" }),
                    ["<C-j>"] = cmp.mapping(cmp.mapping.select_next_item(), { "i", "c" }),
                    ["<C-b>"] = cmp.mapping(cmp.mapping.scroll_docs(-4), { "i", "c" }),  -- ["<C-u>"]
                    ["<C-f>"] = cmp.mapping(cmp.mapping.scroll_docs(4), { "i", "c" }),  -- ["<C-d>"]
                    ["<C-c>"] = cmp.mapping { i = cmp.mapping.abort(), c = cmp.mapping.close(), },
                    ['<CR>'] = cmp.mapping.confirm { select = true },

                    ["<Tab>"] = cmp.mapping(function(fallback)
                        if cmp.visible() then
                            cmp.confirm({ behavior = cmp.ConfirmBehavior.Insert, select = true })
                        else
                            fallback()
                        end
                    end, { "i", "s" }
                    ),

                    -- move in snippet (expansion locations)
                    ['<C-l>'] = cmp.mapping(function()
                      if require 'luasnip'.expand_or_locally_jumpable() then
                        require 'luasnip'.expand_or_jump()
                      end
                    end, { 'i', 's' }),
                    ['<C-h>'] = cmp.mapping(function()
                      if require 'luasnip'.locally_jumpable(-1) then
                        require 'luasnip'.jump(-1)
                      end
                    end, { 'i', 's' }),

                }),
                formatting = {
                    fields = { "kind", "abbr", "menu" },
                    -- fields = { "abbr", "kind", "menu" },
                    maxwidth = 60,
                    maxheight = 10,
                    format = function(entry, vim_item)
                        vim_item.kind = lspkind.symbolic(vim_item.kind, {mode = "symbol"})
                        vim_item.menu = source_mapping[entry.source.name]
                        -- vim_item.kind = string.format('%s %s', lspkind.symbolic(vim_item.kind, {mode = "symbol"}), vim_item.kind)
                        -- vim_item.abbr = string.sub(vim_item.abbr, 1, maxwidth)
                        function Trim(text)
                            local max = 40
                            if text and text:len() > max then
                                text = text:sub(1,max) .. "..."
                            end
                            return text
                        end
                        vim_item.abbr = Trim(vim_item.abbr)
                        -- vim_item.abbr = vim_item.abbr:match("[^(]+")
                        return vim_item
                    end,
                },
                sources = cmp.config.sources({
                    { name = 'nvim_lsp' },
                    { name = 'path' },
                    { name = 'luasnip' },
                    { name = 'buffer' },
                    { name = 'calc' },
                    { name = 'emoji' },
                    { name = 'cmp_matlab' },
                    { name = "dictionary", keyword_length = 2 },
                    { name = "treesitter" },
                    { name = "orgmode" },
                    --{ name = "latex_symbols" },
                }),
                experimental = {
                    ghost_text = {
                        hl_group = 'Comment',
                    },
                    -- ghost_text = false,
                    native_menu = false,
                },
            })
        end,
    },
    -- }}}
   #+END_SRC


